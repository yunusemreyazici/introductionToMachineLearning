
AI8041 Classification

Url:https://globalaihub.com/courses/introduction-to-machine-learning/lessons/ai8040-classification/topic/ai8041-classification/




Tekrar hoş geldiniz! Şimdiye kadar iki ana makine öğrenimi türü olduğunu biliyorsunuz: denetlenen ve denetlenmeyen. Ayrıca, bir evin fiyatı veya şemsiye sayısı gibi sayısal değerleri tahmin etmek için özellikle yararlı olan en popüler denetimli öğrenme modellerinden biri olan doğrusal regresyona aşinasınız. Ama ya bir sayıyla değil, bir kategoriyle ilgileniyorsak? Biz buna sınıflandırma sorunu diyoruz. Bunu birlikte ele alalım.
Sınıflandırma, belirli bir veri kümesini sınıflara ayırma işlemidir. Burada sınıflar bizim etiketlerimiz veya temel gerçeğimiz olarak hareket eder. Bir sınıflandırma modeli, etiketlerini tahmin etmek için bir nesnenin özelliklerini kullanır. Etiketler dediğimiz gibi, muhtemelen burada elimizde başka bir denetimli öğrenme modeli olduğunu tahmin edebilirsiniz. E-posta servis sağlayıcılarınız tarafından spam olmayan e-postalardan gelen spam'leri filtrelemek için kullanılan algoritma bir sınıflandırma örneğidir. Bu model e-postanın özelliklerini kullanır: konu, gönderenin e-posta adresi, e-posta gövdesi ve girdi olarak ekler; ve iki sınıftan biri için bir tahminde bulunur: spam veya spam olmayan. Bu, çıktının iki sınıfla sınırlı olduğu ikili sınıflandırmaya bir örnektir. Spam ve spam olmayan, doğru ve yanlış, sıfırlar ve birler, evet ve hayır, olumlu veya negatif vb. İkiden fazla sınıf varsa, çok sınıflı bir sınıflandırma sorunumuz vardır. Çok sınıflı sınıflandırmaya bir örnek, meyve türlerini renklerine, ağırlıklarına ve boyutlarına göre sınıflandırmak olabilir. Veya komedi, romantizm, drama ve korku gibi farklı türlere filmler.
Soru şu ki, makine öğrenimi bu sorunu nasıl çözebilir? İlk sınıflandırma modelimizle başlayalım: Lojistik regresyon. Lojistik regresyon hakkında düşünmenin en iyi yolu, doğrusal bir regresyon olmasıdır, ancak sınıflandırma problemleri içindir. Lojistik regresyon, lojistik bir işlev, özellikle Sigmoid işlevi kullanır. Bu işlev herhangi bir gerçek girdi alır ve sıfır ile bir arasında bir değer çıkarır. Doğrusal regresyonun aksine, lojistik regresyonun giriş ve çıkış değişkenleri arasında doğrusal bir ilişkiye ihtiyacı yoktur. Sınıflandırma modelimizden veya sınıflandırıcımızdan tahmin edilen sonuçları aldıktan sonra, bu sonuçları gerçek etiketle, temel gerçekle karşılaştırır ve modelimizin performansını değerlendiririz.
Her tahmini dört kategoriye ayırıyoruz: Doğru pozitifler, Yanlış pozitifler, Doğru negatifler ve Yanlış negatifler. Gerçek pozitifler, olumlu olarak tahmin edilen sonuçlardır ve temel gerçek de olumluydu. Yanlış pozitifler, pozitif olarak tahmin edilen örneklerdir, ancak aslında negatiftiler. Aynı şekilde, Doğru negatifler, negatif olarak tahmin edilen örneklerdir ve temel gerçekleri de olumsuzdu. Ve Yanlış negatifler, olumsuz olarak tahmin edilen örneklerdir, ancak temel gerçekleri olumluydu. Buna karışıklık matrisi denir. Biz gerçek pozitif ve negatiflerimizin maksimize, yanlış pozitif ve negatiflerin en aza indirilmesini istiyoruz. Değerlendirme metriklerimizi tanımlamak için şu kategorileri kullanıyoruz: doğruluk, hassasiyet, geri çağırma ve F1 puanı.
Bir algoritmanın doğruluğu, doğru sınıflandırılmış örneklerin oranı ve toplam örnek sayısı olarak temsil edilir. Bir algoritmanın hassasiyeti, pozitif sınıfa sahip doğru sınıflandırılmış örneklerin pozitif olarak tahmin edilen toplam numunelere oranı olarak temsil edilir. Geri çağırma metriği, doğru sınıflandırılmış pozitif sınıfın, aslında pozitif olan toplam örnek sayısına bölünmesi olarak tanımlanır. Hatırlama arkasındaki fikir, sınıflandırıcının kaç tane pozitif örnek yanlış tahmin ettiğini bilmektir. Hatırlama duyarlılık olarak da adlandırılır.
F1 puanı F Ölçüsü olarak da bilinir. Hassasiyet ve geri çağırma arasındaki dengeyi gösterir. Bunun pratikte nasıl sonuçlandığını görelim.
İkili sınıflandırma sorunumuz var. Tümörleri kanserli veya iyi huylu malign olanlara sınıflandırmamız gerekir, bu da kanserli olmayan anlamına gelir. Veri setimiz histopatoloji incelemelerinden elde edilen istatistiksel veriler içermektedir. Bu veri kümesini lojistik regresyon modelimizi eğitmek için kullanacağız. Pandaları içe aktaralım ve veri kümesini okuyalım. Şekil yöntemini kullanarak gözlem ve özellik sayısını kolayca elde edebiliriz. Bu veri kümesinde benzersiz örnekler vardır. Özellikler yarıçap ortalama, doku ortalama, yarıçap en kötü vb. Toplamda özellikler var. Veri kümemizdeki ilk 5 örneği head işlevini kullanarak kontrol edebiliriz. Burada, ilk sütunun hedef değişkeni temsil ettiğini görebiliriz. Aşağıdaki sütunlar özelliklerdir.
Bu gerçek hayattaki bir veri kümesidir ve ona makine öğrenimi algoritmaları uygulamadan önce temizlenmesi ve organize edilmesi gerekir. Makinelerin sayılarla çalıştığını bildiğimiz için hedef değişkenimizi kategorik tipten sayısal tipe dönüştürmemiz gerekiyor. Bunu yapmanın birçok yolu var. Daha basit yöntemlerden birine etiket kodlaması denir. Bununla “M” ve “B”yi 1 ve 0'a dönüştürebiliriz. İlk adım olarak LabelEncoder'ı sklearn kitaplığından içe aktarıyoruz. Ardından, kullanımı kolaylaştırmak için LabelEncoder'ı "labelencoder" değişkenine atarız. Son olarak, üçüncü satırdaki kodla “tanılama” sütununu kategorikten sayısala dönüştürüyoruz. Bir şeylerin eksik olduğunu fark ettiniz mi? Test veri setimiz nerede? Bu sefer sadece bir dosyamız var, bu yüzden bu veri kümesini bir tren setine bölmemiz ve kendimizi test etmemiz gerekiyor. Bunu sklearn kütüphane işlevi tren testi bölmesini kullanarak yapabiliriz.
Ayrıca, regresyon problemi için yaptığımız gibi, tahmin etmek istediğimiz “hedefi” tanımlamamız gerekir. Bu problemde, tümörün kötü huylu (1) veya iyi huylu (0) olup olmadığını tahmin etmeye çalışıyoruz. Bu nedenle, hedef değişkenimiz "teşhis" sütunudur. Ve sütunların geri kalanı “özellikler”. x değişkenini hedef, y değişkenini özellik olarak atayalım. Ve unutmayın, bunu hem tren hem de test veri kümeleri için yapmamız gerekiyor. Bu arada, bunu tüm veri kümesi için de yapabilir ve ardından trene ve teste bölebilirsiniz. Bu size kalmış. Lojistik regresyon modelimizi sklearn kütüphanesinden içe aktarmaya hazırız. Lojistik regresyon modelini içe aktardıktan sonra, onu “model” değişkenine atayabiliriz. Şimdi, modelimizi eğitmeye hazırız, bu da tren veri kümesindeki gizli kalıpları modelimize öğretmek anlamına geliyor. Ve son olarak, test veri kümesinde tahminlerde bulunabiliriz.
Karışıklık matrisini kullanarak sonuçlarımızın doğruluğunu kontrol edebiliriz. İlk olarak, sklearn'dan confusion_matrix'i içe aktarıyoruz ve her metriğin sayısını görüntülüyoruz. 103 doğru negatifimiz, 0 yanlış pozitifimiz, 4 yanlış negatifimiz, 64 doğru pozitifimiz var. Bu, 171 tahminden doğru olduğu anlamına geliyor, bu harika değil mi? Devam edelim. classification_report'u sklearn'dan içe aktarıyoruz ve değerlendirme ölçümlerini görüntülüyoruz. Ve aldığımız oranlar oldukça yüksek. Gerçekten iyi bir iş çıkardık.
Aferin! Aslında bir lojistik regresyon sınıflandırıcısını eğittik ve test ettik. Şimdi, neden başka bir sınıflandırma algoritması denemiyorsunuz: Vector Machine'i destekleyin. SVM, sınıflandırma ve regresyon problemlerini çözmek için kullanılabilecek denetimli bir makine öğrenimi tekniğidir. Ancak çoğunlukla sınıflandırma için kullanılır. Bu algoritmada, her özelliği temsil etmek ve uzaydaki tüm veri noktalarını çizmek için bir eksen kullanıyoruz. Ardından, SVM modeli bu sınıfları ayırmak için sınırlar bulur. Karar sınırı, farklı veri örneklerini belirli sınıflara ayıran şeydir. İki sınıftan farklı hayvanların veri kümesini düşünün: kuşlar ve balıklar. Bu veri setinde sadece üç özellik vardır: vücut ağırlığı, vücut uzunluğu ve günlük gıda tüketimi. 3 boyutlu bir ızgara çiziyoruz ve tüm bu noktaları çiziyoruz. Bir SVM modeli, 2 sınıfı farklılaştıran bir 2D düzlem bulmaya çalışacaktır.
3'ten fazla özellik olsaydı, bir hyper-space'imiz olurdu. Hiper-uzay, 4D, 5D ve benzeri 3 boyuttan daha yüksek bir alandır ve bu nedenle görselleştirmek mümkün değildir. Farklı sınıfları açıkça ayırt eden bir hyper-plane bulabiliriz. Hiper-düzlemler, dört veya daha fazla boyutta var olan çok boyutlu düzlemlerdir. Bu hiper düzlem, sınıflandırma yapmak için bir koşul olarak kullanılır. Hiper düzlemler doğrusalsa, SVM'ye Doğrusal Çekirdek SVM denir. Ancak hiper-düzlem de doğrusal olmayan olabilir. Bu durumda bir Polinom Çekirdeği veya diğer gelişmiş SVM'leri kullanıyoruz. Bu modelin daha önce kullandığımız meme kanseri veri kümesiyle nasıl performans gösterdiğini görelim. LinearSVC'yi sklearn'den içe aktarıp değişkene atayarak başlıyoruz. Şimdi, modelimizi eğitmeye hazırız, bu da tren veri kümesindeki gizli kalıpları modelimize öğretmek anlamına geliyor. Son olarak, test veri kümesindeki tahminleri yapabiliriz.
Destek Vektör Sınıflandırıcı ile tahminlerimiz hazır! Artık modelimizin doğruluğunu Lojistik Regresyon için yaptığımız gibi kontrol edebiliriz. Karışıklık matrisi ile başlayabiliriz. Yüz bir doğru negatifimiz, 2 yanlış pozitifimiz, 4 yanlış negatifimiz, 64 doğru pozitifimiz var. Bu, 171 tahminden 165'inin doğru olduğu anlamına gelir, eskisinden sadece birkaç daha az. Ayrıca sınıflandırma raporunu da kontrol etmeliyiz. Burada da oldukça yüksek metrikler alıyoruz. Ama Lojistik Regresyon ile daha iyi olduk. Ve burada yanlış pozitiflerimiz daha yüksekti. Bu, en aza indirmek istediğimiz bu veri kümesi için önemli bir metriktir, çünkü sağlıklı hastalara kanser teşhisi konmasını istemiyoruz. Bu nedenle, bu sorun ve veri kümesi için Lojistik Regresyon modelini kullanmayı tercih ediyoruz.
Bu videoda başka bir denetimli öğrenme problemi ele aldık: sınıflandırma. Temel sınıflandırma modellerini, lojistik regresyon ve SVM'yi ve sınıflandırmada kullanmamız gereken performans ölçümlerini araştırdık. Artık sınıflandırma veri kümeleriyle dolu bir dünya var. Sağladığımız Colab ile pratik yapın, aynı zamanda diğer veri kümelerini keşfedin ve kendi sınıflandırma modellerinizi eğitin.
Yaklaşan videolarda performanslarını artırmak için daha fazla sınıflandırma modeli ve tekniği göreceksiniz, ancak bundan önce denetimsiz öğrenmenin etiketsiz dünyasına dalıyoruz. Orada görüşürüz!